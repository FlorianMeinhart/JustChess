@startuml BoardAndPieces
skinparam dpi 400

!define LIGHTBLUE
!include style.puml

'skinparam linetype ortho

skinparam package<<TransparentLayout>> {
  shadowing false
  borderColor Transparent
  backgroundColor Transparent
  fontColor Transparent
  stereotypeFontColor Transparent
}

package general <<TransparentLayout>> {

  rectangle Defines [
    RANKS 8 (rows)
    FILES 8 (columns)
  ]

  enum ePiece {
    ePawn
    eRook
    eKnight
    eBishop
    eQueen
    eKing
    eNone
  }
}

Defines -[hidden]-> ePiece

package pieces <<TransparentLayout>> {

  abstract class CChessPiece {
    -ePiece m_type
    -uint m_moveCount
    -bool m_isWhite
    --
    +void IncrementMoveCount()
    .. pure virtual ..
    +vector<pair<int,int>> GetMoveDirections()
    +bool CanMultipleSteps()
    +ePiece GetPieceType()
    +uint GetMoveCount()
    +bool IsWhite()

  }

  class CPawn {

  }

  class CRook {

  }

  class CKnight {

  }

  class CBishop {

  }

  class CQueen {

  }

  class CKing {

  }
}

package board <<TransparentLayout>> {

  class CGamePlay {
    -CChessBoard m_chessBoard
    -pair<CPlayer, CPlayer> m_players
    +bool Move(uint fromRank, int fromFile, uint toRank, int toFile,)
    +void Resignation(bool fromWhite)
    +bool OfferDraw(fromWhite)
  }

  class CPlayer {

  }

  class CChessBoard {
    -vector<vector<unique_ptr<CChessPiece>>> m_board
    -vector<unique_ptr<CChessPiece>> m_removedPieces
    -vector<vector<vector<ePiece>>> m_record
    -bool m_whiteHasToMove 
    -bool m_whiteAlreadyCastled
    -bool m_blackAlreadyCastled
    -unit m_turnCount
    -uint m_turnsWithoutPawnOrCapture
    +void Reset()
    +ePiece GetPieceType(uint rank, int file)
    +vector<vector<bool>> GetValidMoves(uint rank, int file)
    +vector<vector<bool>> GetFieldsAttacked(bool byWhite)
    +bool InCheck(bool forWhite)
    +bool CanCastle(bool forWhite)
    +void PromotePawn(uint rank, int file, ePiece pieceType)
    +bool Checkmate()
    +bool MaterialInsufficient()
    +bool ThreefoldRepitition()
    +bool DueFiftyMoveRule()
    +bool Stalemate()
  }
}

CGamePlay -right[hidden]-> CChessBoard
board -[hidden]-> pieces

CPawn --|> CChessPiece
CRook --|> CChessPiece
CKnight --|> CChessPiece
CBishop --|> CChessPiece
CQueen --|> CChessPiece
CKing --|> CChessPiece

CGamePlay "1" *-- "1" CChessBoard
CGamePlay "1" *-left- "2" CPlayer
CChessBoard "1" *-- "   0..*" CChessPiece : chess board can\n have many pieces

@enduml


@startuml

(Checkmate) --> (Win/Loss)
(Resignation) --> (Win/Loss)
(Draw By Agreement) --> (Draw)
(Insufficient Material) --> (Draw)
(Threefold Repitition) --> (Draw)
(Fifty-Move Rule) --> (Draw)
(Stalemate) --> (Draw)

@enduml